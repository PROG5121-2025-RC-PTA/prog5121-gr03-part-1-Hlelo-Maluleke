import javax.swing.JOptionPane;
public class UserInput 
{   //Method calling technique refferd from Google gemini
    public static void main(String[] args) 
{
    // Prompt the user for their username
    String username = JOptionPane.showInputDialog(null, "Please enter your username:");
    // Call the checkUserName method
    if (Login.checkUserName(username)) 
{
    JOptionPane.showMessageDialog(null, "Username successfully captured");
} else 
{
    JOptionPane.showMessageDialog(null, "Username is not correctly formatted, please ensure that your username contains an underscore and is no more than five characters in length.");
    return; // Return to terminate the code
}
    // Prompt the user for their first and surnames
    String firstname = JOptionPane.showInputDialog(null, "Please enter your first name");
    String lastname = JOptionPane.showInputDialog(null, "Please enter your last name");
    // Prompt the user for their cellphone number
    String phoneNumber = JOptionPane.showInputDialog(null, "Please enter your cellphone number:");
    // Call the checkCellPhoneNumber method
    if (Login.checkCellPhoneNumber(phoneNumber)) 
{
    JOptionPane.showMessageDialog(null, "Cell phone number successfully added.");
} else 
{
    JOptionPane.showMessageDialog(null, "Cell phone number incorrectly formatted or does not contain international code.");
    return; // Return to terminate the code
}
    // Prompt the user for their password
    String password = JOptionPane.showInputDialog(null, "Please enter your password:");
    // Call the checkPasswordComplexity method
    if (Login.checkPasswordComplexity(password)) 
{
    JOptionPane.showMessageDialog(null, "Password successfully captured");
} else 
{
    JOptionPane.showMessageDialog(null, "Password is not correctly formatted; please ensure that the password contains at least eight characters, a capital letter, a number, and a special character.");
    return; // Return to terminate the code
}
    // Call the registerUser method
    Login.registerUser(username, password, phoneNumber);
    // Call the loginUser method
    boolean loginResult = Login.loginUser(username, password);
    // Call the returnLoginStatus method
    String loginStatus = Login.returnLoginStatus(loginResult, firstname, lastname);
    // The users input is returned as a string
    JOptionPane.showMessageDialog(null,loginStatus);

} // main method
}

// Login class to execute the methods to the userInput class
class Login 
{
    // Method to check if the username is valid
    public static boolean checkUserName(String username) 
{
    return username.contains("_") && username.length() <= 5;
}// checkUserName method

    // Method to check if the cellphone number is valid
    public static boolean checkCellPhoneNumber(String phoneNumber) 
{
    if (phoneNumber.length() != 12) 
{ 
    return false; // Returns false if the number is less than 12 digits
}
    if (!phoneNumber.startsWith("+27")) 
{
    return false; // Returns false if the number does not start with +27
}
    return true; // Returns true if all conditions are met
}// checkCellPhoneNumber method

    // Method to check the password complexity
    // Lines 37-44 Referred from Google Gemini
    public static boolean checkPasswordComplexity(String password) 
{
    if (password.length() < 8) 
{
    return false; // Return false if password is more than 8 characters long
}
    if (!password.matches(".*[A-Z].*")) 
{
    return false; // Returns false if password does not contain an uppercase letter
}
    if (!password.matches(".*\\d.*")) 
{
    return false; // Returns false if password does not contain a numeric digit
}
    if (!password.matches(".*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?].*")) 
{
    return false; // Returns false if password does not contain a special character
}
    return true; // Returns true if all conditions are met
}// checkPasswordComplexity method
    
    // Method to register the user
    // Lines 51-52 Referred from Google Gemini
    public static void registerUser(String username, String password, String phoneNumber) 
{
    //Loop to check the username
    if (!checkUserName(username)) 
{
    JOptionPane.showMessageDialog(null, "Invalid username. Please ensure it contains an underscore and is no more than 5 characters long.");
    // Checks the password
} else if (!checkPasswordComplexity(password)) 
{
    JOptionPane.showMessageDialog(null,"Invalid password. Please ensure it is at least 8 characters long and contains an uppercase letter, a number, and a special character.");
    // Checks the phonenumber
} else if (!checkCellPhoneNumber(phoneNumber)) 
{
    JOptionPane.showMessageDialog(null,"Invalid phone number. Please ensure it is 12 digits long and starts with the country code 27.");
            
}
        
}// registerUser method
    // Method to check the
    // Lines 62-65 Referred from Google Gemini
    public static boolean loginUser(String username, String password) 
{
    //  check against the registered username and password
    boolean loginResult = checkUserName(username) && checkPasswordComplexity(password);
    return true;
}// loginUser method
    
    //Method to return the necessary login message
    // Line 68 Referred from Google Gemini
    public static String returnLoginStatus(boolean loginResult, String firstname, String lastname) 
{
    if (loginResult) 
{
    return "Welcome, " + firstname + " " + lastname + " It is great to see you.";
} else 
{
    // If login failed, return an error message
    return "Username or password incorrect. Please try again.";
}
}// returnLoginStatus method
}// Class method