import javax.swing.JOptionPane;
import java.util.Random;

// Login class to handle user login and registration
public class Login {

    // Class variables (static) to store user data
    private static User[] userDatabase = new User[3]; // Array of User objects to store registered users, LIMIT SET TO 3
    private static int userCount = 0; // Variable to keep track of the number of registered users
    private static Random random = new Random(); // Object of Random class to generate random numbers

    // Inner class to represent a user
    private static class User {
        // Instance variables to store user information
        String username;
        String password;
        String phoneNumber;
        String firstname;
        String lastname;

        // Constructor for the User class
        public User(String username, String password, String phoneNumber, String firstname, String lastname) {
            this.username = username; // Assign the provided username to the username variable
            this.password = password; // Assign the provided password to the password variable
            this.phoneNumber = phoneNumber; // Assign the provided phone number to the phoneNumber variable
            this.firstname = firstname; // Assign the provided first name to the firstname variable
            this.lastname = lastname; // Assign the provided last name to the lastname variable
        }
    }

    // Method to check if the username is valid
    public static boolean checkUserName(String username) {
        // Checks if the username contains an underscore and is no more than 5 characters long
        return username.contains("_") && username.length() <= 5; // Returns a boolean value
    }

    // Method to check if the cellphone number is valid
    public static boolean checkCellPhoneNumber(String phoneNumber) {
        // Checks if the phone number is 12 digits long and starts with "+27"
        if (phoneNumber.length() != 12) { // Use of an if statement (decision)
            return false; // Returns false if the number is less than 12 digits
        }
        if (!phoneNumber.startsWith("+27")) { // Use of an if statement (decision) and the ! (not) operator
            return false; // Returns false if the number does not start with +27
        }
        return true; // Returns true if all conditions are met
    }

    // Method to check the password complexity
    public static boolean checkPasswordComplexity(String password) {
        // Checks if the password is at least 8 characters long and contains an uppercase letter, a number, and a special character
        if (password.length() < 8) { // Use of an if statement (decision)
            return false; // Return false if password is less than 8 characters long
        }
        if (!password.matches(".*[A-Z].*")) { // Use of the matches method and regular expression to check for an uppercase letter
            return false; // Returns false if password does not contain an uppercase letter
        }
        if (!password.matches(".*\\d.*")) { // Use of the matches method and regular expression to check for a digit
            return false; // Returns false if password does not contain a numeric digit
        }
        if (!password.matches(".*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?].*")) { // Use of the matches method and regular expression to check for a special character
            return false; // Returns false if password does not contain a special character
        }
        return true; // Returns true if all conditions are met
    }

    // Method to register the user
    public static void registerUser() {
        JOptionPane.showMessageDialog(null, "Welcome to QuickChat"); // Display a registration message

        // Prompt the user for their username
        String username = JOptionPane.showInputDialog(null, "Please enter your username:"); // Use of JOptionPane to get user input,  username is a String variable

        // Call the checkUserName method
        if (Login.checkUserName(username)) { // Use of an if statement (decision) to check if the username is valid
            JOptionPane.showMessageDialog(null, "Username successfully captured"); // Display a success message
        } else {
            JOptionPane.showMessageDialog(null,
                "Username is not correctly formatted, please ensure that your username contains an underscore and is no more than five characters in length."); // Display an error message for invalid username
            return; // Return to terminate the code
        }

        // Prompt the user for their first and surnames
        String firstname = JOptionPane.showInputDialog(null, "Please enter your first name"); // firstname is a String variable
        String lastname = JOptionPane.showInputDialog(null, "Please enter your last name"); // lastname is a String variable

        // Prompt the user for their cellphone number
        String phoneNumber = JOptionPane.showInputDialog(null, "Please enter your cellphone number:"); // phoneNumber is a String variable

        // Call the checkCellPhoneNumber method
        if (Login.checkCellPhoneNumber(phoneNumber)) { // Use of an if statement (decision) to check if the phone number is valid
            JOptionPane.showMessageDialog(null, "Cell phone number successfully added."); // Display a success message
        } else {
            JOptionPane.showMessageDialog(null,
                "Cell phone number incorrectly formatted or does not contain international code."); // Display an error message for invalid phone number
            return; // Return to terminate the code
        }

        // Prompt the user for their password
        String password = JOptionPane.showInputDialog(null, "Please enter your password:"); // password is a String variable
        // Call the checkPasswordComplexity method
        if (Login.checkPasswordComplexity(password)) { // Use of an if statement (decision) to check if the password is valid
            JOptionPane.showMessageDialog(null, "Password successfully captured"); // Display a success message
        } else {
            JOptionPane.showMessageDialog(null,
                "Password is not correctly formatted; please ensure that the password contains at least eight characters, a capital letter, a number, and a special character."); // Display an error message for invalid password
            return; // Return to terminate the code
        }

        // Call the registerUser method (overloaded)
        registerUser(username, password, phoneNumber, firstname, lastname); // Call the registerUser method to store the user's data

        JOptionPane.showMessageDialog(null, "User successfully registered."); // Display a user registered message
    }

    // Method to register the user (private helper)
    private static void registerUser(String username, String password, String phoneNumber, String firstname, String lastname) {
        // Registers a new user
        if (userCount >= userDatabase.length) { // Use of an if statement (decision) to check if the maximum number of users has been reached
            JOptionPane.showMessageDialog(null, "Maximum number of users reached"); // Display a message
            return;
        }
        // Input validation and registration process (these checks are redundant here since they are done in the public registerUser method)
        if (!checkUserName(username)) {
            return;
        } else if (!checkPasswordComplexity(password)) {
            return;
        } else if (!checkCellPhoneNumber(phoneNumber)) {
            return;
        } else if (usernameTaken(username)) {
            JOptionPane.showMessageDialog(null, "Username already exists. Please choose a different username.");
            return;
        }

        User newUser = new User(username, password, phoneNumber, firstname, lastname); // Create a new User object
        userDatabase[userCount] = newUser; // Store the new user in the userDatabase array
        userCount++; // Increment the userCount
    }

    // Method to check if a username is already taken
    private static boolean usernameTaken(String username) {
        // Checks if the username already exists in the database
        for (int i = 0; i < userCount; i++) { // Use of a for loop (iteration) to iterate through the userDatabase array
            if (userDatabase[i] != null && userDatabase[i].username.equals(username)) { // Use of an if statement (decision) and the .equals() method (String method)
                return true; // Return true if the username is found
            }
        }
        return false; // Return false if the username is not found
    }

    // New method to check if a phone number is registered
    public static boolean isPhoneNumberRegistered(String phoneNumber) {
        for (int i = 0; i < userCount; i++) {
            if (userDatabase[i] != null && userDatabase[i].phoneNumber.equals(phoneNumber)) {
                return true;
            }
        }
        return false;
    }

    // Method to login a user
    public static void loginUser() {
        JOptionPane.showMessageDialog(null, "Login"); //display login message
        // Prompt the user for their username
        String username = JOptionPane.showInputDialog(null, "Please enter your username:"); // username is a String variable

        // Prompt the user for their password
        String password = JOptionPane.showInputDialog(null, "Please enter your password:"); // password is a String variable

        // Call the loginUser method
        int loginResult = loginUser(username, password); // Store the result of the login attempt

        // Call the returnLoginStatus method
        String loginStatus = returnLoginStatus(loginResult, username); // Get the login status message

        // The users input is returned as a string
        JOptionPane.showMessageDialog(null, loginStatus); // Display the login status

        if (loginResult != -1) { // If login is successful show loginMenu // Use of an if statement (decision)
            loginMenu(username); // Call loginMenu from Login class
        }
    }

    // Method to login a user (private helper)
    private static int loginUser(String username, String password) {
        //check against the registered username and password
        for (int i = 0; i < userCount; i++) { // Use of a for loop (iteration) to iterate through the userDatabase
            if (userDatabase[i] != null && userDatabase[i].username.equals(username)) { // Use of an if statement (decision) and the .equals() method (String method)
                if (userDatabase[i].password.equals(password)) { // Use of a nested if statement (decision) and the .equals() method (String method)
                    return i; // Return the index of the user in the database if login is successful
                }
            }
        }
        return -1; // Return -1 if login fails
    }

    // Method to return the necessary login message
    public static String returnLoginStatus(int loginResult, String username) {
        //returns the login status message
        if (loginResult != -1) { // Use of an if statement (decision) to check if login was successful
            //get first and last name
            String firstname = ""; // Declare a String variable to store the first name
            String lastname = ""; // Declare a String variable to store the last name
            for (int i = 0; i < userCount; i++) { // Use of a for loop (iteration) to iterate through the userDatabase
                if (userDatabase[i] != null && userDatabase[i].username.equals(username)) { // Use of an if statement (decision) and the .equals() method (String method)
                    firstname = userDatabase[i].firstname; // Assign the user's first name
                    lastname = userDatabase[i].lastname; // Assign the user's last name
                    break; // Exit the loop
                }
            }
            return "Welcome, " + firstname + " " + lastname + " It is great to see you."; // Return a welcome message with the user's name
        } else {
            return "Username or password incorrect. Please try again."; // Return an error message
        }
    }

    // Method to display the login menu
    public static void loginMenu(String username) {
        while (true) { // Use of a while loop (iteration) to keep displaying the login menu
            int choice = UserInput.getLoginMenuChoice(username); // Get the user's choice from the login menu
            if (choice == 3) { // Use of an if statement (decision) to check if the user wants to quit
                JOptionPane.showMessageDialog(null, "Exiting the application. Goodbye!"); //display goodbye message
                break; // Exit the loop if the user chooses to quit
            }
            switch (choice) { // Use of a switch statement (decision) to handle different user choices
                case 1:
                    int numberOfMessages = 0; // Declare an int variable to store the number of messages
                    try {
                        numberOfMessages = Integer.parseInt(JOptionPane.showInputDialog(null,
                                "Enter the number of messages you want to send")); // Get the number of messages from the user using JOptionPane
                    } catch (NumberFormatException e) { // Use of a catch block to handle potential errors
                        JOptionPane.showMessageDialog(null, "Error, Please enter a valid number."); // Display an error message
                        break;
                    }
                    Message.SentMessage(username, numberOfMessages); // Call the SentMessage method in the Message class
                    break;
                case 2:
                    JOptionPane.showMessageDialog(null, "Feature coming soon"); // Display a message indicating that the feature is coming soon
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid choice. Please enter 1, 2, or 3."); // Display an error message for invalid input
            }
        }
    }
}